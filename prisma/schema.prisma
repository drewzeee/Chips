generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  CASH
  INVESTMENT
}

enum AccountStatus {
  ACTIVE
  CLOSED
  HIDDEN
}

enum TransactionStatus {
  PENDING
  CLEARED
  RECONCILED
}

enum CategoryType {
  INCOME
  EXPENSE
  TRANSFER
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String              @unique
  password      String
  emailVerified DateTime?
  role          String              @default("user")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  sessions          Session[]
  accounts          Account[]
  financialAccounts FinancialAccount[]
  categories        Category[]
  importTemplates   ImportTemplate[]
  transactions      Transaction[]      @relation("UserTransactions")
  transactionSplits TransactionSplit[] @relation("UserSplits")
  budgetPeriods     BudgetPeriod[]
  rules             TransactionRule[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String?
  providerAccountId  String?
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FinancialAccount {
  id             String         @id @default(cuid())
  userId         String
  name           String
  type           AccountType
  currency       String         @default("USD")
  openingBalance Int            @default(0)
  creditLimit    Int?
  status         AccountStatus  @default(ACTIVE)
  institution    String?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  rules        TransactionRule[]
}

model Category {
  id          String        @id @default(cuid())
  userId      String
  name        String
  type        CategoryType  @default(EXPENSE)
  color       String?
  icon        String?
  parentId    String?
  budgetLimit Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  splits   TransactionSplit[]
  rules    TransactionRule[]

  @@unique([userId, name])
}

model ImportTemplate {
  id        String   @id @default(cuid())
  userId    String
  name      String
  mappings  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model Transaction {
  id                 String             @id @default(cuid())
  userId             String
  accountId          String
  date               DateTime
  amount             Int
  description        String
  memo               String?
  status             TransactionStatus @default(PENDING)
  reference          String?
  merchant           String?
  pending            Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user    User             @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
  account FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  splits  TransactionSplit[]

  @@index([userId, accountId, date])
  @@index([userId, date])
}

model TransactionSplit {
  id            String   @id @default(cuid())
  userId        String
  transactionId String
  categoryId    String
  amount        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user        User        @relation("UserSplits", fields: [userId], references: [id], onDelete: Cascade)
}

model BudgetPeriod {
  id        String   @id @default(cuid())
  userId    String
  month     Int
  year      Int
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
}

model TransactionRule {
  id                    String   @id @default(cuid())
  userId                String
  name                  String
  categoryId            String
  accountId             String?
  descriptionStartsWith String?
  descriptionContains   String?
  amountEquals          Int?
  priority              Int      @default(100)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  account  FinancialAccount? @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId, priority])
}
