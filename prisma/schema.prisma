generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id                        String                     @id @default(cuid())
  name                      String?
  email                     String                     @unique
  password                  String
  emailVerified             DateTime?
  role                      String                     @default("user")
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  accounts                  Account[]
  budgetPeriods             BudgetPeriod[]
  categories                Category[]
  financialAccounts         FinancialAccount[]
  importTemplates           ImportTemplate[]
  investmentAccounts        InvestmentAccount[]
  investmentAssets          InvestmentAsset[]
  investmentAssetValuations InvestmentAssetValuation[]
  investmentTransactions    InvestmentTransaction[]
  investmentValuations      InvestmentValuation[]
  sessions                  Session[]
  transactions              Transaction[]              @relation("UserTransactions")
  rules                     TransactionRule[]
  transactionSplits         TransactionSplit[]         @relation("UserSplits")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FinancialAccount {
  id             String             @id @default(cuid())
  userId         String
  name           String
  currency       String             @default("USD")
  openingBalance Int                @default(0)
  creditLimit    Int?
  institution    String?
  notes          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  type           AccountType
  status         AccountStatus      @default(ACTIVE)
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  investment     InvestmentAccount?
  transactions   Transaction[]
  rules          TransactionRule[]
}

model Category {
  id          String             @id @default(cuid())
  userId      String
  name        String
  color       String?
  icon        String?
  parentId    String?
  budgetLimit Int?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  type        CategoryType       @default(EXPENSE)
  parent      Category?          @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]         @relation("CategoryHierarchy")
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  rules       TransactionRule[]
  splits      TransactionSplit[]

  @@unique([userId, name])
}

model ImportTemplate {
  id        String   @id @default(cuid())
  userId    String
  name      String
  mappings  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model Transaction {
  id          String             @id @default(cuid())
  userId      String
  accountId   String
  date        DateTime
  amount      Int
  description String
  memo        String?
  reference   String?
  merchant    String?
  pending     Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  status      TransactionStatus  @default(PENDING)
  importTag   String?
  account     FinancialAccount   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user        User               @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
  splits      TransactionSplit[]

  @@index([userId, accountId, date])
  @@index([userId, date])
}

model TransactionSplit {
  id            String      @id @default(cuid())
  userId        String
  transactionId String
  categoryId    String
  amount        Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  user          User        @relation("UserSplits", fields: [userId], references: [id], onDelete: Cascade)
}

model BudgetPeriod {
  id        String   @id @default(cuid())
  userId    String
  month     Int
  year      Int
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
}

model TransactionRule {
  id                    String            @id @default(cuid())
  userId                String
  name                  String
  categoryId            String
  accountId             String?
  descriptionStartsWith String?
  descriptionContains   String?
  amountEquals          Int?
  priority              Int               @default(100)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  account               FinancialAccount? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category              Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, priority])
}

model InvestmentAccount {
  id         String                  @id @default(cuid())
  userId     String
  accountId  String                  @unique
  assetClass InvestmentAssetClass
  kind       InvestmentAccountKind   @default(BROKERAGE)
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @default(now()) @updatedAt
  account    FinancialAccount        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets     InvestmentAsset[]
  trades     InvestmentTransaction[]
  valuations InvestmentValuation[]

  @@index([userId])
}

model InvestmentTransaction {
  id                  String                    @id @default(cuid())
  userId              String
  investmentAccountId String
  investmentAssetId   String?
  type                InvestmentTransactionType
  assetType           InvestmentAssetType?
  symbol              String?
  quantity            Decimal?                  @db.Decimal(18, 8)
  pricePerUnit        Decimal?                  @db.Decimal(18, 8)
  amount              Int
  fees                Int?
  notes               String?
  occurredAt          DateTime
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @default(now()) @updatedAt
  account             InvestmentAccount         @relation(fields: [investmentAccountId], references: [id], onDelete: Cascade)
  asset               InvestmentAsset?          @relation(fields: [investmentAssetId], references: [id], onDelete: Cascade)
  user                User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([investmentAssetId])
  @@index([userId, investmentAccountId, occurredAt], map: "InvestmentTransaction_userId_account_date_idx")
}

model InvestmentValuation {
  id                  String            @id @default(cuid())
  userId              String
  investmentAccountId String
  value               Int
  asOf                DateTime
  createdAt           DateTime          @default(now())
  account             InvestmentAccount @relation(fields: [investmentAccountId], references: [id], onDelete: Cascade)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([investmentAccountId, asOf], map: "InvestmentValuation_account_asOf_key")
  @@index([userId, asOf], map: "InvestmentValuation_user_asOf_idx")
}

model InvestmentAsset {
  id                  String                     @id @default(cuid())
  userId              String
  investmentAccountId String
  name                String
  symbol              String?
  type                InvestmentAssetType
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @default(now()) @updatedAt
  account             InvestmentAccount          @relation(fields: [investmentAccountId], references: [id], onDelete: Cascade)
  user                User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  valuations          InvestmentAssetValuation[]
  transactions        InvestmentTransaction[]

  @@unique([investmentAccountId, name], map: "InvestmentAsset_account_name_key")
  @@index([userId, investmentAccountId], map: "InvestmentAsset_user_account_idx")
}

model InvestmentAssetValuation {
  id                String          @id @default(cuid())
  userId            String
  investmentAssetId String
  value             Int
  quantity          Decimal?        @db.Decimal(18, 8)
  asOf              DateTime
  createdAt         DateTime        @default(now())
  asset             InvestmentAsset @relation(fields: [investmentAssetId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([investmentAssetId, asOf], map: "InvestmentAssetValuation_asset_asOf_key")
  @@index([userId, asOf], map: "InvestmentAssetValuation_user_asOf_idx")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  CASH
  INVESTMENT
}

enum AccountStatus {
  ACTIVE
  CLOSED
  HIDDEN
}

enum InvestmentAssetClass {
  CRYPTO
  EQUITY
  MIXED
}

enum InvestmentAssetType {
  CRYPTO
  EQUITY
}

enum InvestmentTransactionType {
  BUY
  SELL
  DEPOSIT
  WITHDRAW
  DIVIDEND
  INTEREST
  FEE
  ADJUSTMENT
}

enum InvestmentAccountKind {
  BROKERAGE
  WALLET
}

enum TransactionStatus {
  PENDING
  CLEARED
  RECONCILED
}

enum CategoryType {
  INCOME
  EXPENSE
  TRANSFER
}
